{"version":3,"sources":["Event.js","EventList.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","events","handleClick","_this","setState","event","this","props","react_default","a","createElement","className","key","id","local_time","local_date","name","group","yes_rsvp_count","venue","address_1","address_2","address_3","city","localized_country_name","description","visibility","link","onClick","Component","EventList","map","src_Event","getOrRenewAccessToken","_callee","type","url","tokenInfo","regenerator_default","wrap","_context","prev","next","concat","axios","get","sent","localStorage","setItem","data","access_token","refresh_token","Date","now","abrupt","stop","getAccessToken","_callee2","accessToken","searchParams","code","lastSavedTime","refreshToken","_context2","getItem","URLSearchParams","window","location","search","href","_callee3","query","token","result","_context3","startsWith","country","name_string","zip","lat","lon","CitySearch","suggestions","handleInputChanged","value","target","getSuggestions","then","handleItemClicked","updateEvents","_this2","onChange","item","NumberOfEvents","numOfEventsListed","handleValueChanged","App","src_CitySearch","src_EventList","src_NumberOfEvents","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74d1f9b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    showDetails: false,\r\n    events: []\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({ showDetails: !this.state.showDetails })\r\n  }\r\n\r\n  render() {\r\n    const event = this.props.event;\r\n    return (\r\n      <div className=\"events\">\r\n        <ul className=\"event-list\">\r\n          <li key={event.id}>\r\n            <div>\r\n              <p className=\"event_date-time\">{event.local_time} - {event.local_date}</p>\r\n              <p className=\"event_name\">{event.name}</p>\r\n              <p className=\"group_name\">GROUP: {event.group.name}</p>\r\n              <p className=\"event_rsvp\">{event.yes_rsvp_count} people signed up for this meeting</p>\r\n              {this.state.showDetails &&\r\n              <div className=\"eventDetails\">\r\n                <p className=\"address\">\r\n                  <span>{event.venue.name},</span>\r\n                  <span>{event.venue.address_1},</span>\r\n                  <span>{event.venue.address_2},</span>\r\n                  <span>{event.venue.address_3},</span>\r\n                  <span>{event.venue.city},</span>\r\n                  <span>{event.venue.localized_country_name}</span>\r\n                </p>\r\n                <div>\r\n                  <p className=\"description\">{event.description}</p>\r\n                  <p className=\"visibility\">{event.visibility}</p>\r\n                  <p className=\"link\">{event.link}</p>\r\n                </div>\r\n              </div>\r\n              }\r\n              <button className=\"showDetails\" onClick={this.handleClick}>more Details</button>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <ul className=\"ul-eventlist\">\r\n        {this.props.events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import axios from 'axios';\r\nimport { mockEvents } from './mock-events';\r\n\r\nasync function getOrRenewAccessToken(type, key) {\r\n  let url;\r\n  if (type === 'get') {\r\n    // Lambda endpoint to get token by code\r\n    url = `https://vj77ibt40k.execute-api.eu-central-1.amazonaws.com/dev/api/token/${key}`;\r\n  } else if (type === 'renew') {\r\n    // Lambda endpoint to get token by refresh_token\r\n    url = `https://vj77ibt40k.execute-api.eu-central-1.amazonaws.com/dev/api/refresh_token/${key}`;\r\n  }\r\n\r\n  // Use axios to do GET request to the endpoint\r\n  const tokenInfo = await axios.get(url);\r\n  // Save tokens to localStorage together with a timestamp\r\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n  localStorage.setItem('last_saved_time', Date.now());\r\n  // Return the access_token\r\n  return tokenInfo.data.access_token;\r\n}\r\n\r\nasync function getAccessToken() {\r\n  const accessToken = localStorage.getItem('access_token');\r\n\r\n  // If no access_token found\r\n  if (!accessToken) {\r\n    // We try to get the authorization code from the url\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = searchParams.get('code');\r\n\r\n    if (!code) {\r\n      // If we don't find any code, we need to redirect user to get it\r\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=59m4fh64fvor80i00f25e5ia7c&response_type=code&redirect_uri=https://mvtuong.github.io/meetup/';\r\n      return null;\r\n    }\r\n    return getOrRenewAccessToken('get', code);\r\n  }\r\n\r\n  const lastSavedTime = localStorage.getItem('last_saved_time');\r\n\r\n  // Check if access_token is still valid\r\n  // Date.now() returns timestamp in milliseconds, one hour = 3600000 milliseconds\r\n  if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\r\n    // The token is valid, return the token and end the function\r\n    return accessToken;\r\n  }\r\n  // If the access_token is expired, we try to renew it by using refresh_token\r\n  const refreshToken = localStorage.getItem('refresh_token');\r\n  return getOrRenewAccessToken('renew', refreshToken);\r\n}\r\n\r\nasync function getSuggestions(query) {\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return [\r\n      {\r\n        city: 'Munich',\r\n        country: 'de',\r\n        localized_country_name: 'Germany',\r\n        name_string: 'Munich, Germany',\r\n        zip: 'meetup3',\r\n        lat: 48.14,\r\n        lon: 11.58\r\n      },\r\n      {\r\n        city: 'Munich',\r\n        country: 'us',\r\n        localized_country_name: 'USA',\r\n        state: 'ND',\r\n        name_string: 'Munich, North Dakota, USA',\r\n        zip: '58352',\r\n        lat: 48.66,\r\n        lon: -98.85\r\n      }\r\n    ];\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\r\n      + query\r\n      + '&access_token=' + token;\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  }\r\n  return [];\r\n}\r\n\r\nasync function getEvents(lat, lon, page) {\r\n\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return mockEvents.events;\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\r\n      + '&access_token=' + token;\r\n    // lat, lon is optional, if we have lat and lon, then we can add them\r\n    if (lat && lon) {\r\n      url += '&lat=' + lat + '&lon=' + lon;\r\n    }\r\n    // page is also optional, if we have page, then we add it\r\n    if (page) {\r\n      url += '&page=' + page;\r\n    }\r\n\r\n    const result = await axios.get(url);\r\n    return result.data.events;\r\n  }\r\n  return [];\r\n}\r\n\r\nexport { getSuggestions, getEvents };\r\n","import React, { Component } from 'react';\r\nimport { getSuggestions } from './api';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: []\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ query: value });\r\n    getSuggestions(value).then(suggestions => this.setState({ suggestions }));\r\n  }\r\n\r\n  handleItemClicked = (value, lat, lon) => {\r\n    this.setState({ query: value, suggestions: [] });\r\n    this.props.updateEvents(lat, lon);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"city-search\">\r\n        <h1>Meetup Events</h1>\r\n        <p>enter a city</p>\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map(item =>\r\n            <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>{item.name_string}</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    numOfEventsListed: 32\r\n  }\r\n\r\n  handleValueChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ numOfEventsListed: value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"eventlist\">\r\n        <span>Show </span>\r\n        <input\r\n          type=\"number\"\r\n          className=\"numOfEventsListed\"\r\n          value={this.state.numOfEventsListed}\r\n          onChange={this.handleValueChanged}\r\n        />\r\n        <span> Events</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\n//import Event from './Event';\r\nimport NumberOfEvents from './NumberOfEvents';\r\n//import { getSuggetions } from './api';\r\n//import { mockEvents } from './mock-events';\r\nimport { getEvents } from './api';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    numOfEventsListed: null\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch updateEvents={this.updateEvents} />\r\n        <EventList events={this.state.events}/>\r\n        <NumberOfEvents numOfEventsListed={this.state.numOfEventsListed}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}